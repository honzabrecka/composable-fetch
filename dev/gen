#!/usr/bin/env plk

; requires planck repl
; https://planck-repl.org/guide-all.html

(ns sandbox.gen
  (:require [clojure.test :refer [deftest testing is run-tests]]))

(defn t [n] (str "t" n))

(defn T [n] (str "T" n))

(defn template
  [s m]
  (reduce (fn [acc [k v]]
            (let [pattern (re-pattern (str "\\$" (name k)))]
              (clojure.string/replace acc pattern v)))
          s m))

(defn join
  [col]
  (clojure.string/join ", " col))

(defn pairs [ns] (map vector ns (drop 1 ns)))

(defn gen-flow
  [n]
  (let [ns (range 1 (inc n))]
    (template "<$all>($args) => UnaryFnP<$from, $to>"
              {:all  (->> ns (map T) join)
               :args (->> (pairs ns)
                          (map (fn [[from to]]
                                 (template "$arg: UnaryFn<$from, $to>"
                                           {:from (T from)
                                            :to   (T to)
                                            :arg  (t from)})))
                          join)
               :from (T (first ns))
               :to   (T (last ns))})))

(deftest gen-flow-test
  (testing "generated code for flow"
    (is (= "<T1, T2>(t1: UnaryFn<T1, T2>) => UnaryFnP<T1, T2>"
           (gen-flow 2)))
    (is (= "<T1, T2, T3>(t1: UnaryFn<T1, T2>, t2: UnaryFn<T2, T3>) => UnaryFnP<T1, T3>"
           (gen-flow 3)))))

(defn gen-ts
  [n]
  (let [ns (range 1 (inc n))]
    (template "export function pipeP<$all>($args): (v: $from) => Promise<$to>"
              {:all  (->> ns (map T) join)
               :args (->> (pairs ns)
                          (map (fn [[from to]]
                                 (template "$arg: (v: $from) => $to | Promise<$to>"
                                           {:from (T from)
                                            :to   (T to)
                                            :arg  (t from)})))
                          join)
               :from (T (first ns))
               :to   (T (last ns))})))

(deftest gen-ts-test
  (testing "generated code for typescript"
    (is (= "export function pipeP<T1, T2>(t1: (v: T1) => T2 | Promise<T2>): (v: T1) => Promise<T2>"
           (gen-ts 2)))
    (is (= "export function pipeP<T1, T2, T3>(t1: (v: T1) => T2 | Promise<T2>, t2: (v: T2) => T3 | Promise<T3>): (v: T1) => Promise<T3>"
           (gen-ts 3)))))

(defn generate-flow
  [n]
  (str "declare type PipeP = "
       (->> (range 2 (inc n))
            (map gen-flow)
            (map #(template "($x)" {:x %}))
            (reverse)
            (clojure.string/join " & "))))

(defn generate-ts
  [n]
  (->> (range 2 (inc n))
       (map gen-ts)
       (clojure.string/join "\n")))

(comment
  (run-tests))

(defn -main [target]
  (let [n 30]
    (println
      (case target
            "ts"   (generate-ts n)
            "flow" (generate-flow n)
            "specify target: gen \"flow\" or \"ts\""))))

(set! *main-cli-fn* -main)
